name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code_rabbit:
    name: Code Rabbit Review
    runs-on: ubuntu-latest
    # PR에만 코드 래빗 실행
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Code Rabbit Review
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: true
          review_comment_lgtm: false
          openai_light_model: gpt-4-turbo
          openai_heavy_model: gpt-4-turbo

  flutter_test_and_build:
    name: Test, Analyze, and Build
    runs-on: ubuntu-latest
    # PR이 없는 일반 푸시의 경우 특정 커밋 메시지에만 CI 실행
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[CI]')
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
          cache: true
      
      # 기본 설정 및 테스트
      - name: Install dependencies
        run: flutter pub get
        
      - name: Analyze project source
        run: flutter analyze --no-fatal-infos
        continue-on-error: true
        
      - name: Run tests
        run: flutter test
        continue-on-error: true
      
      # Android 빌드 (main 브랜치에 푸시된 경우만)
      - name: Build Android APK
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: flutter build apk --release
        continue-on-error: true
        
      - name: Upload APK
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: warn
      
      # 디스코드 알림 (하나로 통합)
      - name: Discord notification
        if: always()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            # 서버 URL 변수 설정
            SERVER_URL="${{ github.server_url }}"
            
            # 이벤트 타입에 따른 추가 정보
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              EVENT_INFO="PR #${{ github.event.number }}: [${{ github.event.pull_request.title }}](${{ github.event.pull_request.html_url }})"
            else
              EVENT_INFO="커밋: [${{ github.event.head_commit.message }}]($SERVER_URL/${{ github.repository }}/commit/${{ github.sha }})"
            fi
            
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [
                {
                  "title": "${{ job.status == 'success' && '✅ CI/CD 파이프라인 성공' || '❌ CI/CD 파이프라인 실패' }}",
                  "description": "'"$EVENT_INFO"'\n\n${{ job.status == 'success' && '모든 작업이 성공적으로 완료되었습니다! 🎉' || 'GitHub Actions 로그를 확인해주세요. 🔍' }}",
                  "color": ${{ job.status == 'success' && '5763719' || '15548997' }},
                  "fields": [
                    {
                      "name": "📦 저장소",
                      "value": "[${{ github.repository }}]($SERVER_URL/${{ github.repository }})",
                      "inline": true
                    },
                    {
                      "name": "🌿 브랜치",
                      "value": "`${{ github.ref_name }}`",
                      "inline": true
                    },
                    {
                      "name": "👤 실행자",
                      "value": "[${{ github.actor }}]($SERVER_URL/${{ github.actor }})",
                      "inline": true
                    }
                  ],
                  "footer": {
                    "text": "Flutter CI/CD 알림"
                  },
                  "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"
                }
              ]
            }' ${{ secrets.DISCORD_WEBHOOK }}
          else
            echo "::warning::Discord webhook URL is not set. Skipping notification."
          fi 