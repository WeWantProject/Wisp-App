name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: '버전 업데이트 유형 (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version_bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }} # 저장소에 푸시 권한이 있는 토큰 필요
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
          cache: true
      
      - name: Extract current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep "version:" pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          BUILD_NUMBER=$(grep "version:" pubspec.yaml | awk '{print $2}' | cut -d'+' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
      
      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
          BUILD_NUMBER=${{ steps.get_version.outputs.build_number }}
          
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          MAJOR=${version_parts[0]}
          MINOR=${version_parts[1]}
          PATCH=${version_parts[2]}
          
          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_build_number=$NEW_BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          # pubspec.yaml 업데이트
          sed -i "s/version: $CURRENT_VERSION+$BUILD_NUMBER/version: $NEW_VERSION+$NEW_BUILD_NUMBER/" pubspec.yaml
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "버전 업데이트: ${{ steps.bump_version.outputs.new_version }}+${{ steps.bump_version.outputs.new_build_number }}"
          git tag -a v${{ steps.bump_version.outputs.new_version }} -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push
          git push --tags
          
      - name: Discord notification - Version Bump
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "🔼 버전이 업데이트되었습니다"
          description: |
            새 버전: v${{ steps.bump_version.outputs.new_version }}+${{ steps.bump_version.outputs.new_build_number }}
            이전 버전: v${{ steps.get_version.outputs.current_version }}+${{ steps.get_version.outputs.build_number }}
            업데이트 유형: ${{ github.event.inputs.version_type }}
            
            버전이 성공적으로 업데이트되었습니다. 새 태그가 생성되어 릴리스 프로세스가 자동으로 시작됩니다.
          color: 0x5865F2 